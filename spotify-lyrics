#!/usr/bin/env python

import requests
from bs4 import BeautifulSoup
import os
import dbus
from subprocess import Popen, PIPE, call
import errno
import ueberzug.lib.v0 as ueberzug
import textwrap
import time
import atexit

import urllib.parse
import requests
from bs4 import BeautifulSoup
import re

import termios
import select
import sys

from urllib.request import urlretrieve
try:
    from urllib.parse import quote_plus
except ImportError:
    from urllib import quote_plus

from pathlib import Path

def hide_cursor():
    sys.stdout.write("\033[?25l")
    sys.stdout.flush()

def show_cursor():
    sys.stdout.write("\033[?25h")
    sys.stdout.flush()

class KeyPoller():
    def __enter__(self):
        self.fd = sys.stdin.fileno()
        self.new_term = termios.tcgetattr(self.fd)
        self.old_term = termios.tcgetattr(self.fd)

        self.new_term[3] = (self.new_term[3] & ~termios.ICANON & ~termios.ECHO)
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.new_term)

        return self

    def __exit__(self, type, value, traceback):
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_term)

    def poll(self):
        dr,dw,de = select.select([sys.stdin], [], [], 0.0)
        if not dr == []:
            return sys.stdin.read(1)
        return None

def get_lyrics(artist, title):
    title = re.sub(r'(-.*)', '', title)
    search_string = f'{artist} {title} lyrics'
    search_string = urllib.parse.quote_plus(search_string)
    url = 'https://google.com/search?q=' + search_string
    r = requests.get(url)
    soup = BeautifulSoup(r.content, "lxml", from_encoding='UTF-8')
    raw_lyrics = (soup.findAll('div', attrs={'class': 'hwc'}))
    final_lyrics = str.join(u'\n', map(str, raw_lyrics))
    final_lyrics = re.sub(r'<(.*)>', '', string=final_lyrics)
    final_lyrics = '\n'.join(final_lyrics.split('\n')[:-2])
    return final_lyrics

def get_spotify_song_data():
    session_bus = dbus.SessionBus()

    spotify_bus = session_bus.get_object(
        "org.mpris.MediaPlayer2.spotify", "/org/mpris/MediaPlayer2")
    spotify_properties = dbus.Interface(
        spotify_bus, "org.freedesktop.DBus.Properties")
    metadata = spotify_properties.Get(
        "org.mpris.MediaPlayer2.Player", "Metadata")
    title = metadata['xesam:title'].encode(
        'utf-8').decode('utf-8').replace("&", "&amp;")
    artist = metadata['xesam:artist'][0].encode(
        'utf-8').decode('utf-8').replace("&", "&amp;")
    album = metadata['xesam:album'].encode(
        'utf-8').decode('utf-8').replace("&", "&amp;")
    art_url = metadata['mpris:artUrl'].encode(
        'utf-8').decode('utf-8').replace("&", "&amp;")
    return title, artist, album, art_url

@ueberzug.Canvas()
def main(canvas):
    rows, columns = map(int, os.popen('stty size', 'r').read().split())
    try:
        song, artist, album, art_url = get_spotify_song_data()
    except:
        raise ValueError("Can't reach to the Spotify DBus")
    home = str(Path.home())
    lyrics_directory = os.path.join(home, 'lyrics')
    artist_directory = os.path.join(lyrics_directory, artist.replace('/', ''))
    image_directory = os.path.join(artist_directory, 'album_arts')
    lyrics_file = os.path.join(artist_directory, song.replace('/', ''))
    image_file = '{}.png'.format(os.path.join(image_directory, album))

    if not os.path.isdir(lyrics_directory): os.mkdir(lyrics_directory)
    if not os.path.isdir(artist_directory): os.mkdir(artist_directory)
    if not os.path.isdir(image_directory): os.mkdir(image_directory)

    if not os.path.exists(lyrics_file):
        lyrics = get_lyrics(artist, song)
        with open(lyrics_file, 'w') as f:
            f.write(lyrics)
    else:
        with open(lyrics_file, 'r') as f:
            lyrics = ''.join(f.readlines())

    if not os.path.exists(image_file):
        urlretrieve(art_url, image_file)

    album_cover = canvas.create_placement('album_cover',
            x=columns//2, y=4,
            scaler=ueberzug.ScalerOption.COVER.value)
    album_cover.path = image_file
    album_cover.visibility = ueberzug.Visibility.VISIBLE

    os.system('clear')
    current_line = 0
    lines = lyrics.split('\n')
    print(f'\033[95mArtist: {artist}\033[0m')
    print(f'\033[95mAlbum: {album}\033[0m')
    print(f'\033[95mSong: {song}\033[0m')
    hide_cursor()
    old_rows, old_columns = rows, columns
    with KeyPoller() as key_poller:
        while True:
            rows, columns = map(int, os.popen('stty size', 'r').read().split())
            if old_rows != rows or old_columns != columns:
                difference = rows - old_rows
                if difference > 0:
                    current_line -= difference
                    current_line = max(0, current_line)
                    current_line = min(current_line, len(wrapped_lines)-1)
                album_cover.x = columns//2
                os.system('clear')
                sys.stdout.write("\033[0;0H")
                print(f'\033[95mArtist: {artist}\033[0m')
                print(f'\033[95mAlbum: {album}\033[0m')
                print(f'\033[95mSong: {song}\033[0m')
                old_rows = rows
                old_columns = columns

            wrapped_lines = []
            for line in lines:
                wrapped_lines.extend(
                        textwrap.fill(line, columns//2-2).split('\n'))

            sys.stdout.write('\033[5;0H')
            for i in range(current_line, (min(rows+current_line-5,
                len(wrapped_lines)))):
                sys.stdout.write('\x1b[2K')
                string = f'\033[1m{wrapped_lines[i]}\033[0m'
                print(string)

            c = key_poller.poll()
            if c == 'q':
                show_cursor()
                os.system('clear')
                break
            if c == 'j':
                if rows-5 == (min(rows+current_line-5, len(wrapped_lines))) - current_line:
                    current_line += 1
                    current_line = min(current_line, len(wrapped_lines)-1)
            if c == 'k':
                current_line += -1
                current_line = max(current_line, 0)
            if c == 'e':
                try:
                    EDITOR = os.environ.get('EDITOR')
                    call([EDITOR, lyrics_file])
                    with open(lyrics_file, 'r') as f:
                        lyrics = ''.join(f.readlines())
                        lines = lyrics.split('\n')
                    hide_cursor()
                except TypeError:
                    os.system('clear')
                    # TODO: Refresh function
                    print('$EDITOR is not set')
                    time.sleep(1)

if __name__ == '__main__':
    main()
